// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chat.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	Register(ctx context.Context, in *Account, opts ...grpc.CallOption) (*User, error)
	Login(ctx context.Context, in *Account, opts ...grpc.CallOption) (*User, error)
	ChatList(ctx context.Context, in *Num, opts ...grpc.CallOption) (*UserList, error)
	ChatHistory(ctx context.Context, in *Num, opts ...grpc.CallOption) (*ChatLogList, error)
	ChatWith(ctx context.Context, in *Num, opts ...grpc.CallOption) (*Empty, error)
	WatchChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLog, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Register(ctx context.Context, in *Account, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ChatService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Login(ctx context.Context, in *Account, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/ChatService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatList(ctx context.Context, in *Num, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/ChatService/ChatList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatHistory(ctx context.Context, in *Num, opts ...grpc.CallOption) (*ChatLogList, error) {
	out := new(ChatLogList)
	err := c.cc.Invoke(ctx, "/ChatService/ChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatWith(ctx context.Context, in *Num, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ChatService/ChatWith", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) WatchChatRoom(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLog, error) {
	out := new(ChatLog)
	err := c.cc.Invoke(ctx, "/ChatService/WatchChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	Register(context.Context, *Account) (*User, error)
	Login(context.Context, *Account) (*User, error)
	ChatList(context.Context, *Num) (*UserList, error)
	ChatHistory(context.Context, *Num) (*ChatLogList, error)
	ChatWith(context.Context, *Num) (*Empty, error)
	WatchChatRoom(context.Context, *Empty) (*ChatLog, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) Register(context.Context, *Account) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedChatServiceServer) Login(context.Context, *Account) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedChatServiceServer) ChatList(context.Context, *Num) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatList not implemented")
}
func (UnimplementedChatServiceServer) ChatHistory(context.Context, *Num) (*ChatLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHistory not implemented")
}
func (UnimplementedChatServiceServer) ChatWith(context.Context, *Num) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatWith not implemented")
}
func (UnimplementedChatServiceServer) WatchChatRoom(context.Context, *Empty) (*ChatLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchChatRoom not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Register(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Login(ctx, req.(*Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/ChatList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ChatList(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/ChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ChatHistory(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatWith_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ChatWith(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/ChatWith",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ChatWith(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_WatchChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).WatchChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatService/WatchChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).WatchChatRoom(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ChatService_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _ChatService_Login_Handler,
		},
		{
			MethodName: "ChatList",
			Handler:    _ChatService_ChatList_Handler,
		},
		{
			MethodName: "ChatHistory",
			Handler:    _ChatService_ChatHistory_Handler,
		},
		{
			MethodName: "ChatWith",
			Handler:    _ChatService_ChatWith_Handler,
		},
		{
			MethodName: "WatchChatRoom",
			Handler:    _ChatService_WatchChatRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ChatCoupleClient is the client API for ChatCouple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatCoupleClient interface {
	MakeChatRoom(ctx context.Context, in *Num, opts ...grpc.CallOption) (*ChatLogList, error)
	SendChatContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Empty, error)
	ReceiveChatContent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLog, error)
}

type chatCoupleClient struct {
	cc grpc.ClientConnInterface
}

func NewChatCoupleClient(cc grpc.ClientConnInterface) ChatCoupleClient {
	return &chatCoupleClient{cc}
}

func (c *chatCoupleClient) MakeChatRoom(ctx context.Context, in *Num, opts ...grpc.CallOption) (*ChatLogList, error) {
	out := new(ChatLogList)
	err := c.cc.Invoke(ctx, "/ChatCouple/MakeChatRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatCoupleClient) SendChatContent(ctx context.Context, in *Content, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ChatCouple/SendChatContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatCoupleClient) ReceiveChatContent(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChatLog, error) {
	out := new(ChatLog)
	err := c.cc.Invoke(ctx, "/ChatCouple/ReceiveChatContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatCoupleServer is the server API for ChatCouple service.
// All implementations must embed UnimplementedChatCoupleServer
// for forward compatibility
type ChatCoupleServer interface {
	MakeChatRoom(context.Context, *Num) (*ChatLogList, error)
	SendChatContent(context.Context, *Content) (*Empty, error)
	ReceiveChatContent(context.Context, *Empty) (*ChatLog, error)
	mustEmbedUnimplementedChatCoupleServer()
}

// UnimplementedChatCoupleServer must be embedded to have forward compatible implementations.
type UnimplementedChatCoupleServer struct {
}

func (UnimplementedChatCoupleServer) MakeChatRoom(context.Context, *Num) (*ChatLogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeChatRoom not implemented")
}
func (UnimplementedChatCoupleServer) SendChatContent(context.Context, *Content) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChatContent not implemented")
}
func (UnimplementedChatCoupleServer) ReceiveChatContent(context.Context, *Empty) (*ChatLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveChatContent not implemented")
}
func (UnimplementedChatCoupleServer) mustEmbedUnimplementedChatCoupleServer() {}

// UnsafeChatCoupleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatCoupleServer will
// result in compilation errors.
type UnsafeChatCoupleServer interface {
	mustEmbedUnimplementedChatCoupleServer()
}

func RegisterChatCoupleServer(s grpc.ServiceRegistrar, srv ChatCoupleServer) {
	s.RegisterService(&ChatCouple_ServiceDesc, srv)
}

func _ChatCouple_MakeChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Num)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCoupleServer).MakeChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatCouple/MakeChatRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCoupleServer).MakeChatRoom(ctx, req.(*Num))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatCouple_SendChatContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Content)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCoupleServer).SendChatContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatCouple/SendChatContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCoupleServer).SendChatContent(ctx, req.(*Content))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatCouple_ReceiveChatContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatCoupleServer).ReceiveChatContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatCouple/ReceiveChatContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatCoupleServer).ReceiveChatContent(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatCouple_ServiceDesc is the grpc.ServiceDesc for ChatCouple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatCouple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatCouple",
	HandlerType: (*ChatCoupleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeChatRoom",
			Handler:    _ChatCouple_MakeChatRoom_Handler,
		},
		{
			MethodName: "SendChatContent",
			Handler:    _ChatCouple_SendChatContent_Handler,
		},
		{
			MethodName: "ReceiveChatContent",
			Handler:    _ChatCouple_ReceiveChatContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
